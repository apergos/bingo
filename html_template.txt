<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN\ http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>{{heading}}</title>
    <style type="text/css">
        body {
	     font-size: 12px;
	     font-weight: bold;
	     background-image:url({{bgimage}});
	     background-color: #ffffff;
	}
        table { margin: 20px auto; border-spacing: 2px; }
        t.newpage { page-break-after:always; }
        tr { height: 100px; }
        td { text-align: center; border: thin black solid; padding: 10px; width: 100px; }
	td.unmarked { background-color: rgba(255, 255, 255, 0.4); }
	td.marked { background-color: {{color}}; }
	div.reloader { width: 650px; text-align: left; cursor: pointer; }
	button.reloader, button.cheat {
	      border: 0px;
	      background:none!important;
	      color:inherit;
	      cursor: pointer;
	}
    </style>
    <script>
      var trumpisms = [
	  {{phrases}}
      ];

      function shuffle(array) {
	  // stolen from stackoverflow, see
	  // https://stackoverflow.com/questions/18806210/generating-non-repeating-random-numbers-in-js
	  var i = array.length;
	  var j = 0;
	  var temp;

	  while (i--) {
              j = Math.floor(Math.random() * (i+1));

              // swap randomly chosen element with current element
              temp = array[i];
              array[i] = array[j];
              array[j] = temp;
	  }
	  return array;
      }


      function setupCard() {
	  var i, j;

	  // generate an ordering of the items to go on the card
	  toShuffle = []
	  for (i=0; i<trumpisms.length; i++) {
	      toShuffle.push(i);
	  }
	  var randomOrder = shuffle(toShuffle);

	  // fill in the text in the table cells
	  var htmlCells = document.getElementsByTagName("td");
	  for (i = 0; i < htmlCells.length; i++) {
	      if (i < 12) {
		  htmlCells[i].innerHTML = trumpisms[randomOrder[i]];
		  htmlCells[i].className = 'unmarked';
	      } else if (i == 12) {
		  htmlCells[i].innerHTML = "{{free}}";
		  htmlCells[i].className = 'marked';
	      } else if (i > 12) {
		  htmlCells[i].innerHTML = trumpisms[randomOrder[i-1]];
		  htmlCells[i].className = 'unmarked';
	      }
	  }
      }

      function changeCellColor(i) {
	  // never change the center square, it's the free space
	  if (i == 12) {
	      return;
	  }
	  var htmlCells = document.getElementsByTagName("td");
	  if (htmlCells[i].className == 'unmarked') {
	      htmlCells[i].className = 'marked';
	  } else {
	      htmlCells[i].className = 'unmarked';
	  }
      }

      function getIndex(rowColDiag, i) {
	  // given row, column or diag, and a count of how far
	  // into the row/col/diag we are, get the cell index from 0
	  // to 24 starting at upper left...
	  if (rowColDiag[0] == 'r') {
	      return((rowColDiag[1]-1)*5 + i);
	  } else if (rowColDiag[0] == 'c') {
	      return(i*5 + (rowColDiag[1]-1));
	  } else {
	      // diagonals
	      if (rowColDiag[1] == 1) {
		  return(6*i);
	      } else {
		  return(4*i);
	      }
	  }
      }

      function filter(cells, rowColDiag) {
	  var filtered = []
	  for (i=0; i < cells.length; i++) {
	      if (rowColDiag[0] == 'r') {
		  if (cells[i]<(rowColDiag[1]-1)*5 || cells[i]>=rowColDiag[1]*5) {
		      filtered.push(cells[i]);
		  }
	      } else if (rowColDiag[0] == 'c') {
		  if ((cells[i]-(rowColDiag[1]-1))%5) {
		      filtered.push(cells[i]);
		  }
	      } else if (rowColDiag[1] == '1') {
		  // diag 1
		  if (cells[i]%6) {
		      filtered.push(cells[i]);
		  }
	      } else {
		  // diag 2
		  if (cells[i]%4 || cells[i] == 0 || cells[i] == 24) {
		      filtered.push(cells[i]);
		  }
	      }
	  }
	  return(filtered);
      }

      function cheat() {
	  var htmlCells = document.getElementsByTagName("td");
	  var markedCells = [];
	  var squareCount = 0;

	  for (i=0; i<htmlCells.length; i++) {
	      if (i == 12) {
		  // don't count the free space!
		  continue;
	      }
	      if (htmlCells[i].className == 'marked') {
		  markedCells.push(i);
	      }
	  }
	  if (markedCells.length < 10) {
	      alert("No cheating unless you've checked 10 squares!");
	      return;
	  }
	  // choose a random row, column or diagonal along which to
	  // arrange some of the marked squares
	  choices = ['r1','r2','r3','r4', 'r5','c1','c2','c3','c4','c5','d1','d2'];
	  chosen = choices[Math.floor(Math.random() * (choices.length + 1))];

	  var shuffledMarkedOrder = shuffle(markedCells);
	  // drop marked cells in the row/col/diag we are going to replace
	  // since we can't 'swap them in' for unmarked cells in the same line
	  filteredMarkedOrder = filter(shuffledMarkedOrder, chosen)

	  var temp = "";
	  var chosenIndex = 0;
	  for (i=0; i<5; i++) {
	      // swap the text of the element currently in the row/column we are about
	      // to make the 'bingo' row/column, with the text of the element already marked
	      chosenIndex = getIndex(chosen, i);
	      if (htmlCells[chosenIndex].className == 'marked') {
		  // don't swap something into a cell if it's already ok
		  // conveniently this also skips the free space
		  continue;
	      }

	      temp = htmlCells[chosenIndex].innerHTML;
	      htmlCells[chosenIndex].innerHTML = htmlCells[filteredMarkedOrder[i]].innerHTML;
	      htmlCells[filteredMarkedOrder[i]].innerHTML = temp;
	      // swap the classes too
	      temp = htmlCells[chosenIndex].className;
	      htmlCells[chosenIndex].className = htmlCells[filteredMarkedOrder[i]].className;
	      htmlCells[filteredMarkedOrder[i]].className = temp;
	  }
      }

    </script>
  </head>
  <body onload="setupCard();">
    <center><h1>{{heading}}</h1></center>
    <center><div class="reloader"><button class="reloader" onclick="setupCard();">new card</button>|<button class="cheat" onclick="cheat();">cheat</button></div></center>
    <table>
	<tr>
		<td onclick="changeCellColor(0);"></td>
		<td onclick="changeCellColor(1);"></td>
		<td onclick="changeCellColor(2);"></td>
		<td onclick="changeCellColor(3);"></td>
		<td onclick="changeCellColor(4);"></td>
	</tr>
	<tr>
		<td onclick="changeCellColor(5);"></td>
		<td onclick="changeCellColor(6);"></td>
		<td onclick="changeCellColor(7);"></td>
		<td onclick="changeCellColor(8);"></td>
		<td onclick="changeCellColor(9);"></td>
	</tr>
	<tr>
		<td onclick="changeCellColor(10);"></td>
		<td onclick="changeCellColor(11);"></td>
		<td></td>
		<td onclick="changeCellColor(13);"></td>
		<td onclick="changeCellColor(14);"></td>
	</tr>
	<tr>
		<td onclick="changeCellColor(15);"></td>
		<td onclick="changeCellColor(16);"></td>
		<td onclick="changeCellColor(17);"></td>
		<td onclick="changeCellColor(18);"></td>
		<td onclick="changeCellColor(19);"></td>
	</tr>
	<tr>
		<td onclick="changeCellColor(20);"></td>
		<td onclick="changeCellColor(21);"></td>
		<td onclick="changeCellColor(22);"></td>
		<td onclick="changeCellColor(23);"></td>
		<td onclick="changeCellColor(24);"></td>
	</tr>
    </table>
  </body>
</html>
